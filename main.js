import WebSocket from "ws";

Hooks.once("ready", () => {
  const port = 8765;
  const socket = socketlib.getSocket("draw-sphere");

  // üü¢ –ó–∞–ø—É—Å–∫ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞
  const wss = new WebSocket.Server({ port, host: "0.0.0.0" });

  console.log(`üü¢ [draw-sphere] WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:${port}`);

  wss.on("connection", (ws) => {
    console.log("üîå [draw-sphere] –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç");

    ws.on("message", async (msg) => {
      try {
        const data = JSON.parse(msg);
        console.log("üì® [draw-sphere] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);

        const { type, payload } = data;
        const gm = game.users.find(u => u.active && u.isGM);

        if (!gm) {
          console.warn("‚ö†Ô∏è [draw-sphere] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ì–ú–∞ ‚Äî –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
          return;
        }

        await socket.executeForUser(gm.id, type, payload);
      } catch (error) {
        console.error("‚ùå [draw-sphere] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });

    ws.on("close", () => {
      console.log("üîå [draw-sphere] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
    });
  });

  wss.on("error", (err) => {
    console.error("‚ùå [draw-sphere] –û—à–∏–±–∫–∞ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞:", err);
  });
});