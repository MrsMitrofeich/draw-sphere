import WebSocket from 'ws';

const PORT = process.env.PORT || 8765;

const wss = new WebSocket.Server({ port: PORT }, () => {
  console.log(`üü¢ draw-sphere WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:${PORT}`);
});

const clients = new Set();

wss.on('connection', (ws) => {
  console.log("üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω");
  clients.add(ws);

  ws.on('message', (message) => {
    console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message.toString());

    // –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (–≤–∫–ª—é—á–∞—è Foundry)
    for (const client of clients) {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message.toString());
      }
    }
  });

  ws.on('close', () => {
    console.log("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
    clients.delete(ws);
  });

  ws.on('error', (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", err);
  });
});

wss.on('error', (err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞:", err);
});