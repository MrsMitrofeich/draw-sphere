const WebSocket = require("ws");

const PORT = process.env.PORT || 8765;
const wss = new WebSocket.Server({ port: PORT }, () => {
  console.log(`üü¢ draw-sphere WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:${PORT}`);
});

const clients = new Set();
const pendingRequests = new Map(); // requestId -> ws

wss.on("connection", (ws) => {
  console.log("üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω");
  clients.add(ws);

  ws.on("message", (messageBuffer) => {
    const raw = messageBuffer.toString();
    console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", raw);

    let parsed;
    try {
      parsed = JSON.parse(raw);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err);
      return;
    }

    const { requestId, result } = parsed;

    // üîÅ –≠—Ç–æ –û–¢–í–ï–¢ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—Ä–∞—É–∑–µ—Ä–∞)
    if (requestId && result !== undefined) {
      const requester = pendingRequests.get(requestId);
      if (requester && requester.readyState === WebSocket.OPEN) {
        requester.send(JSON.stringify({ requestId, result }));
        pendingRequests.delete(requestId);
        console.log(`üîô –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ (requestId: ${requestId})`);
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è requestId ${requestId}`);
      }
      return;
    }

    // üì§ –≠—Ç–æ –ó–ê–ü–†–û–° ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫—Ç–æ –µ–≥–æ –ø—Ä–∏—Å–ª–∞–ª
    if (requestId) {
      pendingRequests.set(requestId, ws);
    }

    // üöÄ –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
    for (const client of clients) {
      if (client.readyState === WebSocket.OPEN && client !== ws) {
        client.send(raw);
      }
    }
  });

  ws.on("close", () => {
    console.log("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
    clients.delete(ws);

    // –ß–∏—Å—Ç–∏–º –≤—Å–µ requestId, –≥–¥–µ ws —É–∂–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    for (const [requestId, requester] of pendingRequests.entries()) {
      if (requester === ws) {
        pendingRequests.delete(requestId);
      }
    }
  });

  ws.on("error", (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", err);
  });
});

wss.on("error", (err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞:", err);
});